#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_USERS 5       
#define MAX_RESOURCES 5   
#define MAX_NAME_LEN 20

typedef enum{ 
    READ = 1,     
    WRITE = 2,    
    EXECUTE = 4   
} Permission;

typedef struct{
    char name[MAX_NAME_LEN];
} User;

typedef struct{
    char name[MAX_NAME_LEN];
} Resource;

typedef struct{
    char userName[MAX_NAME_LEN];
    int permissions;  
} ACLEntry;

typedef struct{
    Resource resource;
    ACLEntry entries[MAX_USERS];
    int entryCount;
} ACLControlledResource;

typedef struct{
    char resourceName[MAX_NAME_LEN];
    int permissions;  
} Capability;

typedef struct{
    User user;
    Capability capabilities[MAX_RESOURCES];
    int capabilityCount;
} CapabilityUser;

void printPermissions(int perm){
    if (perm == 0) {
        printf("None");
        return;
    }    
    if (perm & READ) printf("Read ");
    if (perm & WRITE) printf("Write ");
    if (perm & EXECUTE) printf("Execute ");
}

int hasPermission(int userPerm, int requiredPerm){
    return (userPerm & requiredPerm) == requiredPerm;
}

void addACLEntry(ACLControlledResource *res, const char *userName, int permissions) {
    if (res->entryCount >= MAX_USERS) {
        printf("Cannot add more ACL entries for resource %s\n", res->resource.name);
        return;
    }    
    strcpy(res->entries[res->entryCount].userName, userName);
    res->entries[res->entryCount].permissions = permissions;
    res->entryCount++;
}

void addCapability(CapabilityUser *user, const char *resourceName, int permissions) {
    if (user->capabilityCount >= MAX_RESOURCES) {
        printf("Cannot add more capabilities for user %s\n", user->user.name);
        return;
    }    
    strcpy(user->capabilities[user->capabilityCount].resourceName, resourceName);
    user->capabilities[user->capabilityCount].permissions = permissions;
    user->capabilityCount++;
}

//ACL System
void checkACLAccess(ACLControlledResource *res, const char *userName, int perm){
    int i;
    for (i = 0; i < res->entryCount; i++) {
        if (strcmp(res->entries[i].userName, userName) == 0) {
            if (hasPermission(res->entries[i].permissions, perm)) {
                printf("ACL Check: User %s requests ", userName);
                printPermissions(perm);
                printf("on %s: Access GRANTED\n", res->resource.name);
            } else {
                printf("ACL Check: User %s requests ", userName);
                printPermissions(perm);
                printf("on %s: Access DENIED\n", res->resource.name);
            }
            return;
        }
    }
    
    printf("ACL Check: User %s has NO entry for resource %s: Access DENIED\n", 
           userName, res->resource.name);
}

void checkCapabilityAccess(CapabilityUser *user, const char *resourceName, int perm){
    int i;
    for (i = 0; i < user->capabilityCount; i++) {
        if (strcmp(user->capabilities[i].resourceName, resourceName) == 0) {
            if (hasPermission(user->capabilities[i].permissions, perm)) {
                printf("Capability Check: User %s requests ", user->user.name);
                printPermissions(perm);
                printf("on %s: Access GRANTED\n", resourceName);
            } else {
                printf("Capability Check: User %s requests ", user->user.name);
                printPermissions(perm);
                printf("on %s: Access DENIED\n", resourceName);
            }
            return;
        }
    }
    printf("Capability Check: User %s has NO capability for %s: Access DENIED\n", 
           user->user.name, resourceName);
}

int main(){
    //Sample users and resources 
    User users[MAX_USERS] = {
        {"Alice"}, 
        {"Bob"}, 
        {"Charlie"}, 
        {"John"},      
        {"Dom"}        
    };    
    Resource resources[MAX_RESOURCES] = {
        {"File1"}, 
        {"File2"}, 
        {"File3"}, 
        {"File4"}, 
        {"File5"}   
    };
    
    ACLControlledResource aclResources[MAX_RESOURCES];
    int i;
    for (i = 0; i < MAX_RESOURCES; i++) {
        aclResources[i].resource = resources[i];
        aclResources[i].entryCount = 0;
    }

    addACLEntry(&aclResources[0], "Alice", READ | WRITE | EXECUTE);
    addACLEntry(&aclResources[0], "Bob", READ);

    addACLEntry(&aclResources[1], "Bob", READ | WRITE);
    addACLEntry(&aclResources[1], "Charlie", READ | EXECUTE);

    addACLEntry(&aclResources[2], "Alice", READ);
    addACLEntry(&aclResources[2], "Charlie", READ | WRITE | EXECUTE);

    addACLEntry(&aclResources[3], "John", READ | WRITE);
    addACLEntry(&aclResources[3], "Dom", READ);
    addACLEntry(&aclResources[3], "Alice", READ | EXECUTE);

    addACLEntry(&aclResources[4], "Dom", READ | WRITE | EXECUTE);
    addACLEntry(&aclResources[4], "John", READ);
    addACLEntry(&aclResources[4], "Bob", READ | EXECUTE);

    CapabilityUser capUsers[MAX_USERS];

    for (i = 0; i < MAX_USERS; i++) {
        capUsers[i].user = users[i];
        capUsers[i].capabilityCount = 0;
    }
    
    addCapability(&capUsers[0], "File1", READ | WRITE | EXECUTE);
    addCapability(&capUsers[0], "File3", READ);
    addCapability(&capUsers[0], "File4", READ | EXECUTE);
    
    addCapability(&capUsers[1], "File1", READ);
    addCapability(&capUsers[1], "File2", READ | WRITE);
    addCapability(&capUsers[1], "File5", READ | EXECUTE);

    addCapability(&capUsers[2], "File2", READ | EXECUTE);
    addCapability(&capUsers[2], "File3", READ | WRITE | EXECUTE);

    addCapability(&capUsers[3], "File4", READ | WRITE);
    addCapability(&capUsers[3], "File5", READ);

    addCapability(&capUsers[4], "File4", READ);
    addCapability(&capUsers[4], "File5", READ | WRITE | EXECUTE);

    printf("\nTesting Access Control List (ACL)\n");

    checkACLAccess(&aclResources[0], "Alice", READ);
    checkACLAccess(&aclResources[0], "Bob", WRITE);
    checkACLAccess(&aclResources[0], "Charlie", READ);

    checkACLAccess(&aclResources[1], "Bob", WRITE);
    checkACLAccess(&aclResources[2], "Charlie", EXECUTE);
    checkACLAccess(&aclResources[3], "John", WRITE);
    checkACLAccess(&aclResources[3], "Dom", WRITE);
    checkACLAccess(&aclResources[4], "Dom", EXECUTE);
    checkACLAccess(&aclResources[4], "Alice", READ);

    printf("\nTesting Capability Based Access Control(CBAC)\n");

    checkCapabilityAccess(&capUsers[0], "File1", WRITE);
    checkCapabilityAccess(&capUsers[1], "File1", WRITE);
    checkCapabilityAccess(&capUsers[2], "File2", READ);

    checkCapabilityAccess(&capUsers[2], "File3", EXECUTE);
    checkCapabilityAccess(&capUsers[3], "File4", WRITE);
    checkCapabilityAccess(&capUsers[3], "File5", WRITE);
    checkCapabilityAccess(&capUsers[4], "File4", READ);
    checkCapabilityAccess(&capUsers[4], "File5", EXECUTE);
    checkCapabilityAccess(&capUsers[0], "File5", READ);
    return 0;
}

